docker container run -d -p 5000:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -d -p 5000:5000 in28min/hello-world-java:0.0.1.RELEASE
docker container run -d -p 5000:5000 in28min/hello-world-python:0.0.1.RELEASE
docker container ls         # list the active containers
docker image ls             # list all the containers
docker container stop cc    # stops the container whose name starts with "cc"

docker container run -d -p 5001:5000 in28min/hello-world-nodejs:0.0.1.RELEASE   # run that js app on port 5001
docker container run -d -p 5002:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -p 5003:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -p 5003:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
 
-d = deattached = run the app; but dont keep the terminal busy, let me continue using it.
in28min/hello-world-nodejs = the link of the docker 'repo' = hub.docker.com/r/in28min/hello-world-nodejs
:0.0.1.RE = version/tag

docker --version
docker container ls
docker build -t in28min/hello-world-docker:v1 .
docker image list
docker run -d -p 5000:5000 in28min/hello-world-docker:v1
docker build -t in28min/hello-world-docker:v2 .
docker container run -d -p 5000:5000 in28min/hello-world-docker:v2
docker build -t in28min/hello-world-docker:v3 .
docker container run -d -p 5000:5000 in28min/hello-world-docker:v3
docker build -t in28min/hello-world-docker:v4 .


docker image = a package for a specific version of your app, includes all the things the app needs(OS, software, code, dependencies)
docker registry = a place to store your images
docker hub = a registry to host Docker images
